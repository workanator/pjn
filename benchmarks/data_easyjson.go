// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package tests

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson794297d0DecodeGithubComWorkanatorPjnBenchmarks(in *jlexer.Lexer, out *TestObj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Heights":
			if in.IsNull() {
				in.Skip()
				out.Heights = nil
			} else {
				in.Delim('[')
				if out.Heights == nil {
					if !in.IsDelim(']') {
						out.Heights = make([]int, 0, 8)
					} else {
						out.Heights = []int{}
					}
				} else {
					out.Heights = (out.Heights)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int
					v1 = int(in.Int())
					out.Heights = append(out.Heights, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Categories":
			easyjson794297d0Decode(in, &out.Categories)
		case "Awesome":
			out.Awesome = bool(in.Bool())
		case "Name":
			out.Name = string(in.String())
		case "Percent":
			out.Percent = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComWorkanatorPjnBenchmarks(out *jwriter.Writer, in TestObj) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Heights\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Heights == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Heights {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Categories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson794297d0Encode(out, in.Categories)
	}
	{
		const prefix string = ",\"Awesome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Awesome))
	}
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Percent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Percent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TestObj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComWorkanatorPjnBenchmarks(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TestObj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComWorkanatorPjnBenchmarks(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TestObj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComWorkanatorPjnBenchmarks(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TestObj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComWorkanatorPjnBenchmarks(l, v)
}
func easyjson794297d0Decode(in *jlexer.Lexer, out *struct {
	One int
	Two int
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "One":
			out.One = int(in.Int())
		case "Two":
			out.Two = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0Encode(out *jwriter.Writer, in struct {
	One int
	Two int
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"One\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.One))
	}
	{
		const prefix string = ",\"Two\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Two))
	}
	out.RawByte('}')
}
